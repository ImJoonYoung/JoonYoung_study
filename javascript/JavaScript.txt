*************Java Script*************
-함수의 효용 : 1.재사용이 가능하다. 
                 2.여러곳에서 사용 가능하다
                 3.유지보수가 용이하다
                 4.가독성이 좋다

-배열 : 연관된 데이터를 모아서 통으로 관리하기 위해서 사용하는 데이터 타입
     ex) var member=['egoing', 'leezche', 'joonyoung'] *배열은 순서 0부터 시작이다. 
         document.write(member[0]); = egoing 출력

-배열의 효용 : 함수는 하나의 값만을 반환할 수 있는데 이 한계를 극복하기 위해 배열이 있다.
-배열의 함수들 : .toUpperCase(); = 소문자 텍스트를 대문자로 바꿔준다.
-배열 데이터 추가하는 방법 : ex) var li = ['a', 'b', 'c', 'd', 'e'];
	1. li.push('f'); - 맨 뒷자리에 f를 추가해준다. 
	2. li = li.concat(['f', 'g']); - 배열 f와 g를 맨뒤에 추가한다.
	3. li.unshift('z'); - 배열의 맨 앞부분에 z를 추가한다
	4. li.splice(1(배열의 두번째 순서), 0(삭제하지 않는다, 1부터는 처음에 지정해 놓은곳부터 삭제), 'd'(배열의 두번째 순서에 d를 추가); 

-배열 데이터 제거하는 방법 : ex) var li = ['a', 'b', 'c', 'd', 'e'];
	1.li.shift(); - 맨앞에 a를 제거해준다.
	2.li.pop(); - 맨뒤에 e를 제거해준다.
	
-배열 데이터 정렬하는 방법 : var li = ['c', 'b', 'a', 'e', 'd'];
	1. li.sort(); - a, b, c, d, e로 정렬 해준다.
	2. li.reverse(); - e, d, c, b, a로 정렬 해준다.
	3. li.sort(sortfunction); - 내가 원하는 대로 정렬할수 있다.

-객체 : 배열과 다르게 중괄호로 시작한다.
        객체 정의 방법 1. ex) var grades = {'egoing' : 10, 'k8805' : 6, 'sorialgi' : 80};
		   2. ex) var grades = {};
			   grades['egoing'] = 10;
			   grades['k8805'] = 6;
			   grades['sorialgi'] = 80;
		    - egoing, k8805, sorialgi는 key 값이 되고 10,6,80은 value가 된다.
         객체 출력 방법 ex) alert(grades['k8805']);
		         alert(grades.k8805);	
	
-객체와 반복문의 조우:  var grades = {'egoing' : 10, 'k8805' : 6, 'sorialgi' : 80};
   for(key in grades) {
     document.write("key : "+key+" value : "+grades[key] + "br />");
   }
(grades 변수의 값들을 반복문이 실행되면서 key값에 하나씩 담는다.)
 ***key는 egoing,k8805, sorialgi이고 grades[key]는 10, 6, 80이 들어온다.
    for(var 변수 in grades)로 써도 됨

* 객체 배열안에 또 다른 객체 배열을 사용할 수 있다.
var grades = {
      'list' : {'egoing' : 10, 'k8805' : 8, 'sorialgi' : 80}
    }
* 출력 방법 = alert(grades['list']['egoing']); = 10이 출력 된다.
* 객체 배열안에 또 다른 객체 함수도 넣을 수 있다.
* 출력 방법 = alert(grades['show']( )); = ( )은 함수 호출문 이다.
* 객체지향 예시 )
var grades = {
      'list' : {'egoing' : 10, 'k8805' : 8, 'sorialgi' : 80},
      'show' : function(){
        for(var name in this.list){
          console.log(name, this.list[name]); // , 로 값을 넣을 수 있다.
        }
      }
    }
    grades.show();

****객체 지향 프로그래밍은 서로 연관이 되어 있을 때 사용해야 한다.

 * 모듈이란 ? 
- 자주 사용되는 코드를 별도의 파일로 만들어서 필요할 때마다 재활용할 수 있다.
- 코드를 개선하면 이를 사용하고 있는 모든 애플리케이션의 동작이 개선된다.
- 코드 수정시에 필요한 로직을 빠르게 찾을 수 있다.
- 필요한 로직만을 로드해서 메모리의 낭비를 줄일 수 있다.
- 한번 다운로드된 모듈은 웹브라우저에 의해서 저장되기 때문에 동일한 로직을 로드 할 때 시간과 네트워크 트래픽을 절약 할 수 있다.

 * 라이브러리란? 자주 사용되는 로직을 재사용하기 편리하도록 잘 정리한 일련의 코드들을 집합시킨 것이다.

* 정규 표현식
- 문자열에서 특정한 문자를 찾아내는 도구
- 정규표현식 패턴 만드는 방법
 1. var pattern = /a/;  - 우리가 찾고자 하는 대상이다. (정규표현식 리터럴)
 2. var pattern = new RegExp('a');  - 정규표현식 객체를 만들어 찾고자 하는패턴이 a이다. (정규표현식 객체 생성자)

* RegExp 객체의 정규 표현식
1. console.log(pattern.exec('abcdef')):
  실행결과는 문자열 a를 값으로 하는 배열을 리턴한다.

2.
- var pattern = /a./;
- console.log(pattern.exec('abcdef'));
/a 뒤에 .이 붙으면 문자열 뒤에 하나가 같이 붙는다.

3.
- console.log(pattern.exec('')); 안에 찾고자하는 문자열이 없다면 null값이 나온다.

4.
- var pattern = /a/;
- console.log(pattern.true('abcdef')); 첫번째 문자열안에 a가 있으면 true, 없으면 false가 나온다.

* String 객체의 정규 표현식
- let pattern=/a/;
- let str = 'abcdef';
- console.log(str.match(pattern));
str.match(pattern) = abcdef중에 첫번째 문자열 a를 찾아라
- console.log(str.replace(pattern, 'A')); 
첫번째 a를 대문자 A로 바꿔라

- let xi = /a/;
  console.log('Abcde'.match(xi));  == null 첫 문자열이 대문자 A 이므로 안나옴
-  let oi = /a/i;
  console.log('Abcde'.match(oi)); == /a/ 뒤에 i 가 붙으면 대문자도 나온다.
-  let xg = /a/;
  console.log('abceda'.match(xg)); == 첫문자열 a 만 나온다.
-  let og = /a/g;
  console.log('abceda'.match(og)); == 문자열 a가 다나온다.
-  let ig = /a/ig;
  console.log('AabcdAa'.match(ig)); == 대문자, 소문자 a가 다 나온다.


- 캡처
(\w+)\s(\w+) : 가로안에 있는것이 그룹이다.
\w는 대문자 A~Z 까지, 소문자 a~z까지, 숫자 0~9까지 표현한다.
\s는 공백이란 뜻이므로 문자뒤에 공백이 있음을 표현한다. 띄어쓰기까지 조건을 만족시킨다.

var pattern = /(\w+)\s(\w+)/;  == pattern은 (전체정규표현) + 공백 + (전체정규표현)으로 정의하였다
var str = "coding everybody"; == str은 문자열로 정의하였다.
var result = str.replace(pattern, "$2, $1"); == result는 str에 pattern을 넣어 2번째 그룹 먼저($2), 첫번째 그룹($1)으로 문자열을 바꿔라.
console.log(result);


- 치환
  var urlPattern = /\b(?:https?):\/\/[a-z0-9-+&@#\/%?=~_|!:,.;]*/gim;  == 정규표현식으로 정의해 놓은것이다.
  var content = '네이버 : https://www.naver.com 입니다.'
  var result= content.replace(urlPattern, function(url){   
    return '<a href="'+url+'">'+url+'</a>';
  });
content에 urlPattern을 문자열로 바꾸자마자 바로 콜백함수로 url함수에 넣어서 a태그로 return한다

  document.write(result);


 - 전역변수와 지역변수

 1. 유효범위
  함수밖에 있는 변수는 전역변수, 함수안에 있는 변수는 지역변수이다.
  * 프로그래밍은 작은것에서 큰것으로 가기 때문에 지역변수를 쓰는 것이 좋다.

  2. 정적 유효범위
    - 자바스크립트는 함수가 선언된 시점에서 유효범위를 갖는다

  /*전역변수*/
  var i = 5;
  function a(){
    var i = 10;
    b();
  }
  function b(){
    document.write(i);
  }
  a();
 
함수가 선언된시점에서는 지역변수가 끝난다. 그러므로 함수 호출을 해도 i의 값은 전역변수인 5로 나온다.

 - 값으로서의 함수와 콜백 : 함수의 용도
1. JavaScript에서는 함수도 객체다.
  function a( ){ }        //함수
  a = {
    b:function (){      //메소드

    }
  }
2. 함수는 값이기 때문에 다른 함수의 인자로 전달 될수도 있다.
function cal(func, num){
    return func(num)
}
function increase(num){
    return num+1
}
function decrease(num){
    return num-1
}
alert(cal(increase, 1));
alert(cal(decrease, 1));


 - 값으로서 함수와 콜백 : 함수의 용도 2

<script>
  function cal(mode){
    var funcs = {
      'plus' : function(left, right){return left + right},	-- 밑에 alert창에서(2,1)을 반환한다.
      'minus' : function(left, right){return left - right}
    }
    return funcs[mode];     -- [mode]는 밑에 alert창에서 'plus', 'minus'객체를 받아온다.
  }

  alert(cal('plus')(2,1));
  alert(cal('minus')(2,1));
</script>

<script>
  var process = [                                            -- process를 객체로 함수로 저장
    function(input){return input + 10;},
    function(input){return input * input;},
    function(input){return input / 2;}
  ];

  var input = 1;			-- input은 1이다.
  for(var i=0; i<process.length;i++){		
    input = process[i](input);	     -- process[i]는 반복문으로 돌면서 객체 안에 함수를 거친다.
  }
  alert(input);   -- process안에 세개의 함수를 거치면서 1 + 10, 11로 변하고 두번째 함수를 거치면서 11 * 11, 121이 되고 마지막 함수를 거치면서 121 / 2 = 60.5가 나오는 알림창이 뜬다
</script>


- 값으로서 함수와 콜백 : 콜백
1. sort(sortfunc) : 데이터타입(함수) / 원소들간에 무엇이 우선인지를 판단한다.

ex 1)
<script>
    let numbers = [20,10,9,8,7,6,5,4,3,2,1];
    let sortfunc = function(a, b){
        console.log(a, b);        -- 객체 안에 a, b 두 수를 놓는다.
        if(a > b){    
            return 1;		 
        }else if(a < b){
            return -1;
        } else{
            return 0;
        }
    }
    console.log(numbers.sort(sortfunc)); //numbers는 객체,배열 / sort()는 메소드이다.
</script>

ex 2)
<script>
    let numbers = [20,10,9,8,7,6,5,4,3,2,1];
    let sortfunc = function(a, b){
        console.log(a, b);
        return a+b;
    }
    console.log(numbers.sort(sortfunc)); //numbers는 객체,배열 / sort()는 메소드이다.
</script>

***여기서 sortfunc함수는 콜백함수가 된다.

 - 값으로서 함수와 콜백 : 비동기 콜백
 비동기적 처리란? 시간이 오래걸리는 작업이 있을 때 이 작업이 완료된후에 처리해야 할 일을 콜백으로 지정하면 해당 작업이 끝났을 때 미리 등록한 작업을 실행하도록 할 수 있다.
 - Ajax (asynchronous Javascript and XML)
	비동기

** json 파일 **
{"title":"JavaScript","author":"egoing"}

$.get('../javascript/js/datasource_json.js', function(result){
        console.log(result);	-- 결과값 콘솔에 객체가 찍힌다.
}, 'json'); -- json file에서 데이터를 불러와서 result에다가 집어넣는


 - closure(클로저) : 외부함수와 내부함수
클로저는 내부함수가 외부함수의 맥락에 접근할 수 있는것을 가르킨다.
함수 안에서만 사용해야하는 함수를 사용할 때 많이 코딩한다.

function outter(){
        var title = 'coding everybody';	-- 외부함수 안에서만 있으면 돌아갈 수 있음
        function inner(){

            alert(title);
        }
        inner();
    }
    outter();


- 클로저란

클로저(closure)는 내부함수와 밀접한 관계를 가지고 있는 주제다. 내부함수는 외부함수의 지역변수에 접근 할 수 있는데 외부함수의 실행이 끝나서 외부함수가 소멸된 이후에도 내부함수가 외부함수의 변수에 접근 할 수 있다.


- private variable
 비밀변수라고 하며 소프트웨어가 커지는 과정에서 어떠한 정보가 있을 때 아무나 수정할수 있는것을 방지할수 있도록 하는 것

<script>
  function factory_movie(title){
    return {
      get_title : function (){
        return title;     //첫번째 매개변수, 외부함수의 지역변수
      },
      set_title : function(_title){
        if(typeof _title == 'String'){
        title = _title
        }else{
          alert('문자열이 아닙니다.')
        }
      }
    }
  }
  ghost = factory_movie('Ghost in the shell');
  matrix = factory_movie('Matrix');

  alert(ghost.get_title());
  alert(matrix.get_title());    //객체들의 함수에 접근할 수 있다.

  ghost.set_title('1');   // private 변수(외부에 감춰진 메소드를 이용할수있다.)
  matrix.set_title('짱구는못말려');
  alert(ghost.get_title());
  alert(matrix.get_title());
</script>


- argument란? 

 * 매개변수와 인자의 차이 *
 ex) function a(arg1 ){	-- 값이 저장되는 변수를 매개변수(parameter)  라고 한다.
       a(1) -- 1은 인자를 뜻한다.
    }

<script>
  function sum(){
    var i, _sum = 0;
    for(i = 0; i < arguments.length; i++){    // arguments는 특수한 변수이다. sum(1,2,3,4) 의 				        인자들에 접근할 수 있다.
      document.write(i+' : '+arguments[i]+'<br />');
      _sum += arguments[i];
    }
    return _sum;
  }
  document.write('result : ' + sum(3,4,5,4));   // 자바스크립트는 광대해서 매개변수가 없어도 여					러개를 넣을 수 있다.
</script>


- 매개변수의 수

매개변수와 관련된 두가지 수가 있다. 하나는 함수.length, 다른 하나는 arguments.length이다. arguments.length는 함수로 전달된 실제 인자의 수를 의미하고, 함수.length는 함수에 정의된 인자의 수를 의미한다

<script>
  function zero(){
    console.log(
            'zero.length', zero.length,
            'arguments', arguments.length
    );
  }
  function one(arg1){
    console.log(
            'one.length', one.length,
            'arguments', arguments.length
    );
  }
  function two(arg1, arg2){
    console.log(
            'two.length', two.length,
            'arguments', arguments.length
    );
  }
  zero(); // zero.length(매개변수) 0 arguments(인자의 수) 0
  one('val1', 'val2');  // one.length(매개변수) 1 arguments(인자의 수) 2
  two('val1');  // two.length(매개변수) 2 arguments(인자의 수) 1
</script>

 - apply 의 사용

<script>
  o1 = {val1:1, val2:2, val3:3}
  o2 = {v1:10, v2:50, v3:100, v4:25}
  function sum(){
    var _sum = 0;
    for(name in this){    /*o1, o2가 들어간다*/
      _sum += this[name];
    }
    return _sum;
  }
  alert(sum.apply(o1)) // 6   sum()으로 호출해도 되지만 sum.apply()로 호출 가능
  alert(sum.apply(o2)) // 185
</script>

 - 객체지향 프로그래밍
 Object Oriented Programming(OOP) 상태와 행위로 이루어진 객체를 만드는것

-부품화-
객체지향은 부품화의 정점이라고 할 수 있다.
메소드는 부품화의 예라고 할 수 있다.

-생성자와 new-
1.객체를 작성하다 보면 코드가 중복되는것이 있다.
ex) 
/*객체를 만드는 과정2*/
var person1 = {
   'name' : 'joonyoung',
   'introduce' : function() {
       return 'My name is ' + this.name;
   }
}


var person2 = {
   'name' : 'yujung',
   'introduce' : function() {
       return 'My name is ' + this.name;
   }
}

2. 생성자 (constructor) 는 객체를 만드는 역할을 하는 함수다.
자바스크립트에서 함수는 재사용 가능한 로직의 묶음이 아니라 객체를 만드는 창조자라고 할 수 있다.

function person(){}
  let p = new person();   // p = person{ }; new는 객체 생성자이며 함수이다.
  p.name = 'joonyoung';
  p.introduce = function(){
    return 'My name is ' + this.name;
  }

  function person(){};
  let p2 = new person();
  p2.name = 'yujung';
  p2.introduce = function(){
    return 'My name is ' + this.name;
  }
    // 별로 개선된 것이 없다.
  document.write(p.introduce() + '<br>', p2.introduce() + '<br>');

  /*개선된 자바스크립트*/
  function Person(name){
    this.name = name;
    this.introduce = function(){
      return "My name is " + this.name;      //초기화 (init)
    }
  }
  let p3 = new Person('joonyoung');
  document.write(p3.introduce()+'<br>');
  let p4 = new Person('yujung');
  document.write(p4.introduce()+'<br>');

 - 함수와 this
 ** this는 함수 내에서 함수 호출 맥락을 의미한다. 상황에 따라서 달라진다는 의미이다, this는 함수와 객체의 관계를 연결시켜주는 역할을 한다.
 ex)   function func(){
    if(window === this){
      document.write('window === this');
    }
  }func()     // this는 window와 같다

 - 메소드와 this
 ** 객체의 소속인 메소드의 this는 그 객체를 가르킨다.
 ex) let o ={
    func : function(){      // func는 윈도우라는 함수의 method 이다.
      if(o === this){
        document.write('o===this')
      }
    }
  }
  o.func()

 - 생성자와 this

 











