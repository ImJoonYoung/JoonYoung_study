* react.js *

1. package.json 에서 scripts{ start는 개발 프로그램을 실행시켜준다.
		         build는 실제 배포모드로 만들어준다.
		         eject는 내부설정파일을 꺼내준다.

2. App.js는 함수형 컴퍼넌트로 이루어져있다.	

  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React~!~!
        </a>
      </header>
    </div>
  );    --> JSX(JavaScript XML)이라고 한다.  JavaScript 이므로 html과 다르다.

3. component폴더안에 Hello.js 를 만들고 추가 할때는
 import Hello from './component/Hello';

export default function Hello(){
  return <p>Hello</p>
} 이런식으로 함수들을 만들고 호출 할때는 <Hello />

4. css 작성법
 4-1. 첫번째 인라인 스타일로 작성( 객체로 작성한다)
  <h1 style={
{                                        세미콜론이 아닌 객체라서 쉼표 사용
				         숫자는 그냥 써도되지만 단위는 따옴표안에
color:'red',
  border : '2px solid #707070',
  opacity : 0.5,
  marginBottom: '30px',
}

    }>Hello</h1>

 4-2. 내부 스타일시트
 - 스타일시트 만들고 추가할 땐 import './App.css';
 ** 문제는 클래스명이 겹칠경우 다른 css에서 해도 각 css 처리가 안된다 그래서 같은 클래스명일경우 css를 (name).module.css로 바꿔주고 import styles from "./Hello.module.css"; css추가하고 개별적으로 넣고 싶을 땐 <div className={styles.box}></div> 이런식으로 추가

5. 프론트엔드 라이브러리
 - 개발을 하게 될때 생산성과 깊이 관계가 있고 유지보수가 가능하다.
 - Angular, Vue, React

1. Angular : httpd 클라이언트, 공식라이브러리, 다국어 기능 있다 (Type Script 사용)
2. React : 여러군데서 조립하는 방식, 앞에서만 보여주고 기능들은 써드파티 라이브러리?를 사용
리덕스,  리액트라우터들
3. Vue : 입문자가 들어오기 쉬움, cdn을 불러와서 하는것처럼 가능, directive기능도 있고 jsx도 쓸 수 있다.

6. React Virtual DOM
 - Virual DOM(가상 DOM)이란 DOM을 가볍게 만든 JavaScript 표현이라고 할 수 있고 주로 React, Vue.js 그리고 Elm에 사용된다. 가상DOM은 실제로 스크린에 랜더링하는 것이 아니기 때문에 DOM을 직접 업데이트하는 것보다 상대적으로 빠르다.

ex) // Virtual DOM representation
{
  type: "ul",
  props: {
    "class": "fruits"
  },
  children: [
    {
      type: "li",
      props: null,
      children: [
        "Apple"
      ]
    },
    {
      type: "li",
      props: null,
      children: [
        "Orange"
      ]
    },
    {
      type: "li",
      props: null,
      children: [
        "Banana"
      ]
    }
  ]
}

7. 리액트만 Virtual DOM을 쓰나?
 - 아니다. Vue, Marko등 많은 라이브러리가 쓰고있지만 React는 어마어마한 생태계, 사용하는 곳이 많다(FACEBOOK, BBC, Codeacademy), 한번 사용하면 좋아하게 된다!


8. 리액트 코드 작성하기
 - Webpack은 bundling작업을 통해 특정 확장자마다 어떤 작업을 할때 압축해서 내보내준다.
웹 프로젝트를 만들때 전체적으로 파일을 관리하는 도구이다.
 - Babel은 자바스크립트를 변환시켜주는 도구이다.

**** APP.js ****

import React, { Component} from "react";	-- react 모듈을 불러와서 사용하겠다. React를 사용할때는 무조건 필요하다.

class App extends Component {	-- class는 Component를 만드는 방법 첫번째다. 
  render () {			-- render() (메소드)은 jsx파일 형태로 만들어 줘야한다.
    return (
      <div>
        <h1>안녕하세요 리액트</h1>    -- method이다
      </div>
    );
  }
}
export default App;

9. JSX 기본 문법 알아보기
HTML이랑 비슷하지만 지켜야할 규칙이 몇가지 있다.

 1. 꼭 닫혀야 하는 태그
<input type="text" />  -- 꼭 셀프 클로징 태그를 써야한다.

 2. 두개이상의 엘리먼트는 꼭 하나의 엘리먼트로 감싸져야 한다.
<div>		-- 두개의 엘리먼트를 감싸는 태그
      <div>
          Hello
      </div>
      <div>
          BYE
      </div>
</div>
* 꼭 감싸야한다는 불편함이 있어서, 상단에 import React, { Component, Fragment} from "react"; -- Fragment를 불러온다.
<Fragment>
          <div>
            Hello
          </div>
            <div>
              BYE
            </div>
 </Fragment>  Fragment를 불러오면 두개로 나뉘어서 나온다.

 3. JSX 안에 자바스크립트 값 사용하기
class App extends Component {
  render () {
    const name='react';
    return (
          <div>
            hello {name}	-- 객체 형식으로 변수를 불러온다.
          </div>
    );
  }
}

var = 한번만 사용할수 있다.
const = 한번 선언 후 고정적인 값
let = 유동적인 값

 4. JSX 기본문법 1
{			-- { }안에 조건문을 사용할 수 있다. php문 특수기호 조건문도
			    사용 가능하다.
                  name === 'velopert' && <div>벨로퍼트다!</div>
 }

 (function() {	-- function() 밖에 괄호로 감싸준다.
                      if(value === 1) return <div>1</div>
                      if(value === 2) return <div>2</div>
                      if(value === 3) return <div>3</div>
                      return <div>없다</div>
 })()	-- 괄호로 바로 실행해준다

(() => {		-- 화살표 함수로 대체 가능
                      if(value === 1) return <div>1</div>
                      if(value === 2) return <div>2</div>
                      if(value === 3) return <div>3</div>
                      return <div>없다</div>
})()


5. JSX 기본문법 2
 - CSS 하는방법 : camel_case로 한다.

render () {
        const style = {			-style 변수를 객체로 저장한다.
            backgroundColor: 'black',		-camel_case
            padding: '16px',
            color: 'white',
            fontSize:'36px'
        };

        return <div style={style} className="App">안녕하세요!</div> 
					
				- style변수를 불러온다, class대신 className을 쓴다.
    }

import './App.css'; 		-- css를 불러오는 방법

6. Props를 사용하는 방법
***Props : 부모 컴포넌트가 자식 컴포넌트한때 값을 보내주는것이다.


 6-1. src폴더에 MyName.js를 만들었다.

 import React, { Component } from 'react';	-- 필수로 써야하는 부분

class MyName extends Component {
    
    static defaultProps = {		-- 만약 name값이 안적혀있을때 기본 상태값이다.
        name: "기본이름"
    }
    render() {
        return (
            <div>
                안녕하세요! 제 이름은 <b>{this.props.name}</b> 입니다.
            </div>
        );
    }

MyName.defaultProps = {		-- 이런 방법도 있다.
    name:'임준영'
};

}

export default MyName;	-- MyName으로 값 내보낸다.

 6-2. App.js에 상단에 import MyName from './MyName';	를 적어서 import 해준다.

import React, { Component} from "react";
import MyName from './MyName';

class App extends Component {
  render () {
      return <div><MyName name="정유정"/>;</div>	-- name값을 써주는대로 나오고 아						니면 위에있는 기본 상태값이 나옴	
  }
}
export default App;

 6-3. 함수형 컴포넌트

import React, { Component } from 'react';	-- 함수형 컴포넌트로 만들면 더 이상 컴포넌트					를 불러오지 않아도 된다.

const MyName = ({name}) => {	-- ({name})은 비구조화 할당이라 부른다.
    return (
    <div>
        안녕하세요! 제 이름은 {name} 입니다.
    </div>
    )
};

MyName.defaultProps = {
    name: '임시훈'
}

export default MyName;

 ** 함수형 컴포넌트는 메모리 자원도 덜 사용하고 단순하게 어떤 값을 받아와서 보여주기만 하는 용도이면 사용한다.







